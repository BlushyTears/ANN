{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0","program":"C:\\Users\\adamp\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","vector2d","--edition=2018","C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=3ea5c2878d413edf","-C","extra-filename=-3ea5c2878d413edf","--out-dir","c:\\ann\\target\\rls\\debug\\deps","-L","dependency=c:\\ann\\target\\rls\\debug\\deps","--extern","proc_vector2d=c:\\ann\\target\\rls\\debug\\deps\\proc_vector2d-1976064017d10bcf.dll","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\adamp\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\ann\\target\\rls\\debug\\deps\\libvector2d-3ea5c2878d413edf.rmeta"},"prelude":{"crate_id":{"name":"vector2d","disambiguator":[17742404099459938236,0]},"crate_root":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src","external_crates":[{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[13015713666403456114,0]}},{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[1507510987272037120,0]}},{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[3803325750332457499,0]}},{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[4223354511651166533,0]}},{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[15700094508901508366,0]}},{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[12632183332710247155,0]}},{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[18262169243471273054,0]}},{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[15664785966706829415,0]}},{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[3895343934390880989,0]}},{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[1841993658411810574,0]}},{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","num":11,"id":{"name":"adler","disambiguator":[1117248029108287081,0]}},{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[14646112292732085519,0]}},{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[11979428506951486581,0]}},{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[2104796995944127881,0]}},{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[4084207378877276393,0]}},{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","num":16,"id":{"name":"proc_vector2d","disambiguator":[14323390922406668310,0]}}],"span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":0,"byte_end":18324,"line_start":1,"line_end":638,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":0,"byte_end":18324,"line_start":1,"line_end":638,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":20},{"krate":0,"index":23},{"krate":0,"index":26},{"krate":0,"index":29},{"krate":0,"index":32},{"krate":0,"index":35},{"krate":0,"index":152},{"krate":0,"index":156},{"krate":0,"index":158},{"krate":0,"index":161},{"krate":0,"index":164},{"krate":0,"index":166},{"krate":0,"index":169},{"krate":0,"index":171},{"krate":0,"index":38},{"krate":0,"index":45},{"krate":0,"index":49},{"krate":0,"index":52},{"krate":0,"index":55},{"krate":0,"index":60},{"krate":0,"index":63},{"krate":0,"index":69},{"krate":0,"index":72},{"krate":0,"index":76},{"krate":0,"index":80},{"krate":0,"index":86},{"krate":0,"index":90},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":105},{"krate":0,"index":110},{"krate":0,"index":113},{"krate":0,"index":118},{"krate":0,"index":123},{"krate":0,"index":126},{"krate":0,"index":131},{"krate":0,"index":136},{"krate":0,"index":139},{"krate":0,"index":144},{"krate":0,"index":149}],"decl_id":null,"docs":" # vector2d\n A simple and convenient 2D vector library without excessive use of external\n dependencies. If other vector crates are swiss-army knives, vector2d is a\n spoon; safe, intuitive, and convenient. As an added bonus, you won't run\n into any excursions with the law using this library thanks to the awfully\n permissive Unlicense.","sig":null,"attributes":[{"value":"/ # vector2d","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":0,"byte_end":14,"line_start":1,"line_end":1,"column_start":1,"column_end":15}},{"value":"/ A simple and convenient 2D vector library without excessive use of external","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":15,"byte_end":94,"line_start":2,"line_end":2,"column_start":1,"column_end":80}},{"value":"/ dependencies. If other vector crates are swiss-army knives, vector2d is a","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":95,"byte_end":172,"line_start":3,"line_end":3,"column_start":1,"column_end":78}},{"value":"/ spoon; safe, intuitive, and convenient. As an added bonus, you won't run","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":173,"byte_end":249,"line_start":4,"line_end":4,"column_start":1,"column_end":77}},{"value":"/ into any excursions with the law using this library thanks to the awfully","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":250,"byte_end":327,"line_start":5,"line_end":5,"column_start":1,"column_end":78}},{"value":"/ permissive Unlicense.","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":328,"byte_end":353,"line_start":6,"line_end":6,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":354,"byte_end":357,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ The only type in this crate is [`Vector2D`], which is highly generic;","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":358,"byte_end":431,"line_start":8,"line_end":8,"column_start":1,"column_end":74}},{"value":"/ shifting functionality depending upon the traits implemented by its internal","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":432,"byte_end":512,"line_start":9,"line_end":9,"column_start":1,"column_end":81}},{"value":"/ components' types.","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":513,"byte_end":535,"line_start":10,"line_end":10,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":536,"byte_end":539,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ [`Vector2D`]: struct.Vector2D.html","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":540,"byte_end":578,"line_start":12,"line_end":12,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":579,"byte_end":582,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":583,"byte_end":596,"line_start":14,"line_end":14,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":597,"byte_end":604,"line_start":15,"line_end":15,"column_start":1,"column_end":8}},{"value":"/ use vector2d::Vector2D;","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":605,"byte_end":632,"line_start":16,"line_end":16,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":633,"byte_end":636,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":637,"byte_end":652,"line_start":18,"line_end":18,"column_start":1,"column_end":16}},{"value":"/     // Vectors have fields X and Y, these can be of any type","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":653,"byte_end":717,"line_start":19,"line_end":19,"column_start":1,"column_end":65}},{"value":"/     let v1: Vector2D<i32> = Vector2D { x: 10, y: 5 };","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":718,"byte_end":775,"line_start":20,"line_end":20,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":776,"byte_end":779,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/     // Alternatively you can use new(..) to condense instantiation","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":780,"byte_end":850,"line_start":22,"line_end":22,"column_start":1,"column_end":71}},{"value":"/     let v2: Vector2D<f64> = Vector2D::new(13.0, 11.5);","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":851,"byte_end":909,"line_start":23,"line_end":23,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":910,"byte_end":913,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/     // There are two ways to cast between Vector2Ds, depending on the source","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":914,"byte_end":994,"line_start":25,"line_end":25,"column_start":1,"column_end":81}},{"value":"/     // and target types.","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":995,"byte_end":1023,"line_start":26,"line_end":26,"column_start":1,"column_end":29}},{"value":"/     //","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":1024,"byte_end":1034,"line_start":27,"line_end":27,"column_start":1,"column_end":11}},{"value":"/     // If the target type has a implementation of From<SourceType>, then you","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":1035,"byte_end":1115,"line_start":28,"line_end":28,"column_start":1,"column_end":81}},{"value":"/     // can either use source.into_vec2d() or Vector2D::from_vec2d(source).","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":1116,"byte_end":1194,"line_start":29,"line_end":29,"column_start":1,"column_end":79}},{"value":"/     assert_eq!(Vector2D::new(10.0, 5.0), v1.into_vec2d());","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":1195,"byte_end":1257,"line_start":30,"line_end":30,"column_start":1,"column_end":63}},{"value":"/     assert_eq!(Vector2D::new(10.0, 5.0), Vector2D::from_vec2d(v1));","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":1258,"byte_end":1329,"line_start":31,"line_end":31,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":1330,"byte_end":1333,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/     // If there is no From or Into implementation, then you're out of luck","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":1334,"byte_end":1412,"line_start":33,"line_end":33,"column_start":1,"column_end":79}},{"value":"/     // unless you are using specific primitives, such as i32 and f64. In","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":1413,"byte_end":1489,"line_start":34,"line_end":34,"column_start":1,"column_end":77}},{"value":"/     // this case you can use specialised functions, as shown below:","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":1490,"byte_end":1561,"line_start":35,"line_end":35,"column_start":1,"column_end":72}},{"value":"/     assert_eq!(Vector2D::new(13, 11), v2.as_i32s());","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":1562,"byte_end":1618,"line_start":36,"line_end":36,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":1619,"byte_end":1622,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/     // The full list of interoperable primitives is as follows:","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":1623,"byte_end":1690,"line_start":38,"line_end":38,"column_start":1,"column_end":68}},{"value":"/     //   - i32, i64, isize","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":1691,"byte_end":1721,"line_start":39,"line_end":39,"column_start":1,"column_end":31}},{"value":"/     //   - u32, u64, usize","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":1722,"byte_end":1752,"line_start":40,"line_end":40,"column_start":1,"column_end":31}},{"value":"/     //   - f32, f64","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":1753,"byte_end":1776,"line_start":41,"line_end":41,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":1777,"byte_end":1780,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/     // As primitives generally implement From/Into for lossless casts,","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":1781,"byte_end":1855,"line_start":43,"line_end":43,"column_start":1,"column_end":75}},{"value":"/     // an as_Ts() function is not available for those types, and","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":1856,"byte_end":1924,"line_start":44,"line_end":44,"column_start":1,"column_end":69}},{"value":"/     // from(..)/into() should be favoured.","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":1925,"byte_end":1971,"line_start":45,"line_end":45,"column_start":1,"column_end":47}},{"value":"/     //","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":1972,"byte_end":1982,"line_start":46,"line_end":46,"column_start":1,"column_end":11}},{"value":"/     // Casts between signed and unsigned primitives will perform bounds","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":1983,"byte_end":2058,"line_start":47,"line_end":47,"column_start":1,"column_end":76}},{"value":"/     // checking, so casting the vector (-10.0, 2.0) to a Vector2D<u32> will","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":2059,"byte_end":2138,"line_start":48,"line_end":48,"column_start":1,"column_end":80}},{"value":"/     // result in the vector (0, 2).","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":2139,"byte_end":2178,"line_start":49,"line_end":49,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":2179,"byte_end":2182,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/     // For types with an Add and Mul implementation, the functions dot() and","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":2183,"byte_end":2263,"line_start":51,"line_end":51,"column_start":1,"column_end":81}},{"value":"/     // length_squared() are available. For access to length(), normalise(),","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":2264,"byte_end":2343,"line_start":52,"line_end":52,"column_start":1,"column_end":80}},{"value":"/     // or angle() however, you must be using either Vector2D<f32> or","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":2344,"byte_end":2416,"line_start":53,"line_end":53,"column_start":1,"column_end":73}},{"value":"/     // Vector2D<f64>.","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":2417,"byte_end":2442,"line_start":54,"line_end":54,"column_start":1,"column_end":26}},{"value":"/     let _v1_len_sq = v1.length_squared();","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":2443,"byte_end":2488,"line_start":55,"line_end":55,"column_start":1,"column_end":46}},{"value":"/     let v2_len = v2.length();","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":2489,"byte_end":2522,"line_start":56,"line_end":56,"column_start":1,"column_end":34}},{"value":"/     let v2_dir = v2.normalise();","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":2523,"byte_end":2559,"line_start":57,"line_end":57,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":2560,"byte_end":2563,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/     // Assuming the operator traits are implemented for the types involved,","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":2564,"byte_end":2643,"line_start":59,"line_end":59,"column_start":1,"column_end":80}},{"value":"/     // you can add and subtract Vector2Ds from one-another, as well as","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":2644,"byte_end":2718,"line_start":60,"line_end":60,"column_start":1,"column_end":75}},{"value":"/     // multiply and divide them with scalar values.","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":2719,"byte_end":2774,"line_start":61,"line_end":61,"column_start":1,"column_end":56}},{"value":"/     assert_eq!(v2, v2_dir * v2_len);","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":2775,"byte_end":2815,"line_start":62,"line_end":62,"column_start":1,"column_end":41}},{"value":"/     assert_eq!(Vector2D::new(23.0, 16.5),  v2 + v1.into_vec2d()) ;","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":2816,"byte_end":2886,"line_start":63,"line_end":63,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":2887,"byte_end":2890,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/     // If you feel the need to multiply or divide individual components of","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":2891,"byte_end":2969,"line_start":65,"line_end":65,"column_start":1,"column_end":79}},{"value":"/     // vectors with the same type, you can use mul_components(...) or","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":2970,"byte_end":3043,"line_start":66,"line_end":66,"column_start":1,"column_end":74}},{"value":"/     // div_components(...) provided that their types can be multiplied or","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":3044,"byte_end":3121,"line_start":67,"line_end":67,"column_start":1,"column_end":78}},{"value":"/     // divided.","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":3122,"byte_end":3141,"line_start":68,"line_end":68,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":3142,"byte_end":3145,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/     // For any Vector2D<T>, there is an implementation of","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":3146,"byte_end":3207,"line_start":70,"line_end":70,"column_start":1,"column_end":62}},{"value":"/     // From<(T, T)> and From<[T; 2]>","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":3208,"byte_end":3248,"line_start":71,"line_end":71,"column_start":1,"column_end":41}},{"value":"/     let v4: Vector2D<f64> = Vector2D::new(1.5, 2.3);","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":3249,"byte_end":3305,"line_start":72,"line_end":72,"column_start":1,"column_end":57}},{"value":"/     assert_eq!(v4, (1.5, 2.3).into());","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":3306,"byte_end":3348,"line_start":73,"line_end":73,"column_start":1,"column_end":43}},{"value":"/     assert_eq!(v4, [1.5, 2.3].into());","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":3349,"byte_end":3391,"line_start":74,"line_end":74,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":3392,"byte_end":3395,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/     // Additionally, there is an Into<(T, T)> implementation for any types","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":3396,"byte_end":3474,"line_start":76,"line_end":76,"column_start":1,"column_end":79}},{"value":"/     // that the vector components have their own Into implementations for","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":3475,"byte_end":3552,"line_start":77,"line_end":77,"column_start":1,"column_end":78}},{"value":"/     assert_eq!((1.5, 2.3), v4.into());","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":3553,"byte_end":3595,"line_start":78,"line_end":78,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":3596,"byte_end":3599,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/     // If you want the normal of a vector you can just call normal()","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":3600,"byte_end":3672,"line_start":80,"line_end":80,"column_start":1,"column_end":73}},{"value":"/     let v5 = Vector2D::new(-10.0, -2.3);","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":3673,"byte_end":3717,"line_start":81,"line_end":81,"column_start":1,"column_end":45}},{"value":"/     assert_eq!(Vector2D::new(2.3, -10.0), v5.normal());","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":3718,"byte_end":3777,"line_start":82,"line_end":82,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":3778,"byte_end":3781,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/     // You can get a vector consisting of only the horizontal or vertical","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":3782,"byte_end":3859,"line_start":84,"line_end":84,"column_start":1,"column_end":78}},{"value":"/     // component of a vector by calling horizontal() or vertical()","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":3860,"byte_end":3930,"line_start":85,"line_end":85,"column_start":1,"column_end":71}},{"value":"/     // respectively","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":3931,"byte_end":3954,"line_start":86,"line_end":86,"column_start":1,"column_end":24}},{"value":"/     let v6 = Vector2D::new(12.3, 83.2);","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":3955,"byte_end":3998,"line_start":87,"line_end":87,"column_start":1,"column_end":44}},{"value":"/     assert_eq!(Vector2D::new(12.3, 0.0), v6.horizontal());","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":3999,"byte_end":4061,"line_start":88,"line_end":88,"column_start":1,"column_end":63}},{"value":"/     assert_eq!(Vector2D::new(0.0, 83.2), v6.vertical());","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":4062,"byte_end":4122,"line_start":89,"line_end":89,"column_start":1,"column_end":61}},{"value":"/ }","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":4123,"byte_end":4128,"line_start":90,"line_end":90,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":4129,"byte_end":4136,"line_start":91,"line_end":91,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":152},"span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":6598,"byte_end":6606,"line_start":149,"line_end":149,"column_start":12,"column_end":20},"name":"Vector2D","qualname":"::Vector2D","value":"Vector2D { x, y }","parent":null,"children":[{"krate":0,"index":154},{"krate":0,"index":155}],"decl_id":null,"docs":" A 2D vector, containing an `x` and a `y` component. While many types can be\n used for a `Vector2D`'s components, the traits they implement determine\n what functions are available.","sig":null,"attributes":[{"value":"/ A 2D vector, containing an `x` and a `y` component. While many types can be","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":4304,"byte_end":4383,"line_start":99,"line_end":99,"column_start":1,"column_end":80}},{"value":"/ used for a `Vector2D`'s components, the traits they implement determine","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":4384,"byte_end":4459,"line_start":100,"line_end":100,"column_start":1,"column_end":76}},{"value":"/ what functions are available.","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":4460,"byte_end":4493,"line_start":101,"line_end":101,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":4494,"byte_end":4497,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ Provided that the components implement the necessary traits, `Vector2D`s","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":4498,"byte_end":4574,"line_start":103,"line_end":103,"column_start":1,"column_end":77}},{"value":"/ can be added to or subtracted from one-another, and they can be mulitplied","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":4575,"byte_end":4653,"line_start":104,"line_end":104,"column_start":1,"column_end":79}},{"value":"/ and divided by scalar values.","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":4654,"byte_end":4687,"line_start":105,"line_end":105,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":4688,"byte_end":4691,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/ There are generally two options for converting between `Vector2D` types. If","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":4692,"byte_end":4771,"line_start":107,"line_end":107,"column_start":1,"column_end":80}},{"value":"/ the internal components' type has an implementation of `Into` that targets","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":4772,"byte_end":4850,"line_start":108,"line_end":108,"column_start":1,"column_end":79}},{"value":"/ the desired type, then [`into_vec2d()`] can be called from the source object,","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":4851,"byte_end":4932,"line_start":109,"line_end":109,"column_start":1,"column_end":82}},{"value":"/ or [`from_vec2d(..)`] can be called and the source object can be provided.","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":4933,"byte_end":5011,"line_start":110,"line_end":110,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":5012,"byte_end":5015,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ If no `Into` implementation exists, then the only option is to use one of the","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":5016,"byte_end":5097,"line_start":112,"line_end":112,"column_start":1,"column_end":82}},{"value":"/ flavours of casting with `as`. These are in the form `as_types()`, and are only","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":5098,"byte_end":5181,"line_start":113,"line_end":113,"column_start":1,"column_end":84}},{"value":"/ implemented for specific types of components. An example usage would look like","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":5182,"byte_end":5264,"line_start":114,"line_end":114,"column_start":1,"column_end":83}},{"value":"/ this:","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":5265,"byte_end":5274,"line_start":115,"line_end":115,"column_start":1,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":5275,"byte_end":5282,"line_start":116,"line_end":116,"column_start":1,"column_end":8}},{"value":"/ use vector2d::Vector2D;","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":5283,"byte_end":5310,"line_start":117,"line_end":117,"column_start":1,"column_end":28}},{"value":"/ let f64_vector: Vector2D<f64> = Vector2D::new(10.3, 11.1);","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":5311,"byte_end":5373,"line_start":118,"line_end":118,"column_start":1,"column_end":63}},{"value":"/ let i32_vector: Vector2D<i32> = f64_vector.as_i32s();","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":5374,"byte_end":5431,"line_start":119,"line_end":119,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(Vector2D::new(10, 11), i32_vector);","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":5432,"byte_end":5482,"line_start":120,"line_end":120,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":5483,"byte_end":5490,"line_start":121,"line_end":121,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":5491,"byte_end":5494,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ Implementations of `as_types()` are only available when an implementation of","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":5495,"byte_end":5575,"line_start":123,"line_end":123,"column_start":1,"column_end":81}},{"value":"/ [`into_vec2d()`] is unavailable. This is to seperate between the lossless casting","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":5576,"byte_end":5661,"line_start":124,"line_end":124,"column_start":1,"column_end":86}},{"value":"/ of primitives with `into()` and `from(..)`, and the lossy casting between","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":5662,"byte_end":5739,"line_start":125,"line_end":125,"column_start":1,"column_end":78}},{"value":"/ primitives of varying detail.","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":5740,"byte_end":5773,"line_start":126,"line_end":126,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":5774,"byte_end":5777,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ Casts from signed types to unsigned types have a small additional check that","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":5778,"byte_end":5858,"line_start":128,"line_end":128,"column_start":1,"column_end":81}},{"value":"/ ensures a lower bound of 0 on the signed value, to reduce the chances of","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":5859,"byte_end":5935,"line_start":129,"line_end":129,"column_start":1,"column_end":77}},{"value":"/ experiencing undefined behaviour. This means that a `Vector2D<f64>` with a","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":5936,"byte_end":6014,"line_start":130,"line_end":130,"column_start":1,"column_end":79}},{"value":"/ value of `(-10.3, 11.1)` would become `(0, 11)` when cast to a `Vector2D<u32>`","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":6015,"byte_end":6097,"line_start":131,"line_end":131,"column_start":1,"column_end":83}},{"value":"/ with [`as_u32s()`].","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":6098,"byte_end":6121,"line_start":132,"line_end":132,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":6122,"byte_end":6125,"line_start":133,"line_end":133,"column_start":1,"column_end":4}},{"value":"/ The current list of interoperable types that can be cast with the `as` family of","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":6126,"byte_end":6210,"line_start":134,"line_end":134,"column_start":1,"column_end":85}},{"value":"/ functions is as follows:","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":6211,"byte_end":6239,"line_start":135,"line_end":135,"column_start":1,"column_end":29}},{"value":"/   - `i32`","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":6240,"byte_end":6253,"line_start":136,"line_end":136,"column_start":1,"column_end":14}},{"value":"/   - `i64`,","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":6254,"byte_end":6268,"line_start":137,"line_end":137,"column_start":1,"column_end":15}},{"value":"/   - `isize`","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":6269,"byte_end":6284,"line_start":138,"line_end":138,"column_start":1,"column_end":16}},{"value":"/   - `u32`","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":6285,"byte_end":6298,"line_start":139,"line_end":139,"column_start":1,"column_end":14}},{"value":"/   - `u64`","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":6299,"byte_end":6312,"line_start":140,"line_end":140,"column_start":1,"column_end":14}},{"value":"/   - `usize`","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":6313,"byte_end":6328,"line_start":141,"line_end":141,"column_start":1,"column_end":16}},{"value":"/   - `f32`","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":6329,"byte_end":6342,"line_start":142,"line_end":142,"column_start":1,"column_end":14}},{"value":"/   - `f64`","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":6343,"byte_end":6356,"line_start":143,"line_end":143,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":6357,"byte_end":6360,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ [`into_vec2d()`]: struct.Vector2D.html#method.into_vec2d","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":6361,"byte_end":6421,"line_start":145,"line_end":145,"column_start":1,"column_end":61}},{"value":"/ [`from_vec2d(..)`]: struct.Vector2D.html#method.from_vec2d","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":6422,"byte_end":6484,"line_start":146,"line_end":146,"column_start":1,"column_end":63}},{"value":"/ [`as_u32s()`]: struct.Vector2D.html#method.as_u32s-1","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":6485,"byte_end":6541,"line_start":147,"line_end":147,"column_start":1,"column_end":57}}]},{"kind":"Field","id":{"krate":0,"index":154},"span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":6620,"byte_end":6621,"line_start":150,"line_end":150,"column_start":9,"column_end":10},"name":"x","qualname":"::Vector2D::x","value":"T","parent":{"krate":0,"index":152},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":155},"span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":6634,"byte_end":6635,"line_start":151,"line_end":151,"column_start":9,"column_end":10},"name":"y","qualname":"::Vector2D::y","value":"T","parent":{"krate":0,"index":152},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":6752,"byte_end":6755,"line_start":156,"line_end":156,"column_start":12,"column_end":15},"name":"new","qualname":"<Vector2D<T>>::new","value":"pub fn new(T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Vector2D` with the provided components.\n","sig":null,"attributes":[{"value":"/ Create a new `Vector2D` with the provided components.","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":6683,"byte_end":6740,"line_start":155,"line_end":155,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":41},"span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":7216,"byte_end":7226,"line_start":170,"line_end":170,"column_start":12,"column_end":22},"name":"from_vec2d","qualname":"<Vector2D<T>>::from_vec2d","value":"pub fn from_vec2d<U: Into<T> + Copy + Clone>(Vector2D<U>) -> Vector2D<T>","parent":null,"children":[],"decl_id":null,"docs":" Convert a `Vector2` of type `U` to one of type `T`. Available only when\n type T has implemented `From<U>`.","sig":null,"attributes":[{"value":"/ Convert a `Vector2` of type `U` to one of type `T`. Available only when","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":6811,"byte_end":6886,"line_start":160,"line_end":160,"column_start":5,"column_end":80}},{"value":"/ type T has implemented `From<U>`.","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":6891,"byte_end":6928,"line_start":161,"line_end":161,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":6933,"byte_end":6936,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":6941,"byte_end":6954,"line_start":163,"line_end":163,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":6959,"byte_end":6966,"line_start":164,"line_end":164,"column_start":5,"column_end":12}},{"value":"/ use vector2d::Vector2D;","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":6971,"byte_end":6998,"line_start":165,"line_end":165,"column_start":5,"column_end":32}},{"value":"/ let i32_vector: Vector2D<i32> = Vector2D::new(25, 8);","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":7003,"byte_end":7060,"line_start":166,"line_end":166,"column_start":5,"column_end":62}},{"value":"/ let f64_vector: Vector2D<f64> = Vector2D::from_vec2d(i32_vector);","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":7065,"byte_end":7134,"line_start":167,"line_end":167,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(Vector2D::new(25.0, 8.0), f64_vector);","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":7139,"byte_end":7192,"line_start":168,"line_end":168,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":7197,"byte_end":7204,"line_start":169,"line_end":169,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":43},"span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":7845,"byte_end":7855,"line_start":188,"line_end":188,"column_start":12,"column_end":22},"name":"into_vec2d","qualname":"<Vector2D<T>>::into_vec2d","value":"pub fn into_vec2d<U: From<T>>(Self) -> Vector2D<U>","parent":null,"children":[],"decl_id":null,"docs":" Convert a `Vector2` of type `T` to one of type `U`. Available only when\n type T has implemented `Into<U>`.","sig":null,"attributes":[{"value":"/ Convert a `Vector2` of type `T` to one of type `U`. Available only when","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":7387,"byte_end":7462,"line_start":177,"line_end":177,"column_start":5,"column_end":80}},{"value":"/ type T has implemented `Into<U>`.","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":7467,"byte_end":7504,"line_start":178,"line_end":178,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":7509,"byte_end":7512,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":7517,"byte_end":7530,"line_start":180,"line_end":180,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":7535,"byte_end":7542,"line_start":181,"line_end":181,"column_start":5,"column_end":12}},{"value":"/ use vector2d::Vector2D;","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":7547,"byte_end":7574,"line_start":182,"line_end":182,"column_start":5,"column_end":32}},{"value":"/ let i32_vector: Vector2D<i32> = Vector2D::new(25, 8);","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":7579,"byte_end":7636,"line_start":183,"line_end":183,"column_start":5,"column_end":62}},{"value":"/ let i32_vector: Vector2D<i32> = Vector2D::new(25, 8);","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":7641,"byte_end":7698,"line_start":184,"line_end":184,"column_start":5,"column_end":62}},{"value":"/ let f64_vector: Vector2D<f64> = i32_vector.into_vec2d();","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":7703,"byte_end":7763,"line_start":185,"line_end":185,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(Vector2D::new(25.0, 8.0), f64_vector);","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":7768,"byte_end":7821,"line_start":186,"line_end":186,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":7826,"byte_end":7833,"line_start":187,"line_end":187,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":8289,"byte_end":8299,"line_start":205,"line_end":205,"column_start":12,"column_end":22},"name":"horizontal","qualname":"<Vector2D<T>>::horizontal","value":"pub fn horizontal(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a vector with only the horizontal component of the current one","sig":null,"attributes":[{"value":"/ Returns a vector with only the horizontal component of the current one","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":8024,"byte_end":8098,"line_start":197,"line_end":197,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":8103,"byte_end":8106,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":8111,"byte_end":8124,"line_start":199,"line_end":199,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":8129,"byte_end":8136,"line_start":200,"line_end":200,"column_start":5,"column_end":12}},{"value":"/ use vector2d::Vector2D;","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":8141,"byte_end":8168,"line_start":201,"line_end":201,"column_start":5,"column_end":32}},{"value":"/ let v = Vector2D::new(10, 20);","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":8173,"byte_end":8207,"line_start":202,"line_end":202,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(Vector2D::new(10, 0), v.horizontal());","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":8212,"byte_end":8265,"line_start":203,"line_end":203,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":8270,"byte_end":8277,"line_start":204,"line_end":204,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":8659,"byte_end":8667,"line_start":219,"line_end":219,"column_start":12,"column_end":20},"name":"vertical","qualname":"<Vector2D<T>>::vertical","value":"pub fn vertical(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a vector with only the vertical component of the current one","sig":null,"attributes":[{"value":"/ Returns a vector with only the vertical component of the current one","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":8410,"byte_end":8482,"line_start":212,"line_end":212,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":8487,"byte_end":8490,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":8495,"byte_end":8508,"line_start":214,"line_end":214,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":8513,"byte_end":8520,"line_start":215,"line_end":215,"column_start":5,"column_end":12}},{"value":"/ use vector2d::Vector2D;","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":8525,"byte_end":8552,"line_start":216,"line_end":216,"column_start":5,"column_end":32}},{"value":"/ let v = Vector2D::new(10, 20);","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":8557,"byte_end":8591,"line_start":217,"line_end":217,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(Vector2D::new(0, 20), v.vertical());","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":8596,"byte_end":8647,"line_start":218,"line_end":218,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":9261,"byte_end":9275,"line_start":241,"line_end":241,"column_start":12,"column_end":26},"name":"mul_components","qualname":"<Vector2D<T>>::mul_components","value":"pub fn mul_components(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a new vector with components equal to each of the current vector's\n components multiplied by the corresponding component of the provided vector","sig":null,"attributes":[{"value":"/ Returns a new vector with components equal to each of the current vector's","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":8850,"byte_end":8928,"line_start":231,"line_end":231,"column_start":5,"column_end":83}},{"value":"/ components multiplied by the corresponding component of the provided vector","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":8933,"byte_end":9012,"line_start":232,"line_end":232,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":9017,"byte_end":9020,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":9025,"byte_end":9038,"line_start":234,"line_end":234,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":9043,"byte_end":9050,"line_start":235,"line_end":235,"column_start":5,"column_end":12}},{"value":"/ use vector2d::Vector2D;","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":9055,"byte_end":9082,"line_start":236,"line_end":236,"column_start":5,"column_end":32}},{"value":"/ let v1 = Vector2D::new(11.0, -2.5);","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":9087,"byte_end":9126,"line_start":237,"line_end":237,"column_start":5,"column_end":44}},{"value":"/ let v2 = Vector2D::new(0.5, -2.0);","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":9131,"byte_end":9169,"line_start":238,"line_end":238,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(Vector2D::new(5.5, 5.0), v1.mul_components(v2));","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":9174,"byte_end":9237,"line_start":239,"line_end":239,"column_start":5,"column_end":68}},{"value":"/ ```","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":9242,"byte_end":9249,"line_start":240,"line_end":240,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":9889,"byte_end":9903,"line_start":263,"line_end":263,"column_start":12,"column_end":26},"name":"div_components","qualname":"<Vector2D<T>>::div_components","value":"pub fn div_components(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a new vector with components equal to each of the current vector's\n components divided by the corresponding component of the provided vector","sig":null,"attributes":[{"value":"/ Returns a new vector with components equal to each of the current vector's","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":9479,"byte_end":9557,"line_start":253,"line_end":253,"column_start":5,"column_end":83}},{"value":"/ components divided by the corresponding component of the provided vector","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":9562,"byte_end":9638,"line_start":254,"line_end":254,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":9643,"byte_end":9646,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":9651,"byte_end":9664,"line_start":256,"line_end":256,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":9669,"byte_end":9676,"line_start":257,"line_end":257,"column_start":5,"column_end":12}},{"value":"/ use vector2d::Vector2D;","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":9681,"byte_end":9708,"line_start":258,"line_end":258,"column_start":5,"column_end":32}},{"value":"/ let v1 = Vector2D::new(11.0, -2.5);","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":9713,"byte_end":9752,"line_start":259,"line_end":259,"column_start":5,"column_end":44}},{"value":"/ let v2 = Vector2D::new(0.5, -2.0);","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":9757,"byte_end":9795,"line_start":260,"line_end":260,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(Vector2D::new(22.0, 1.25), v1.div_components(v2));","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":9800,"byte_end":9865,"line_start":261,"line_end":261,"column_start":5,"column_end":70}},{"value":"/ ```","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":9870,"byte_end":9877,"line_start":262,"line_end":262,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":10589,"byte_end":10595,"line_start":296,"line_end":296,"column_start":12,"column_end":18},"name":"normal","qualname":"<Vector2D<T>>::normal","value":"pub fn normal(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a vector perpendicular to the current one.","sig":null,"attributes":[{"value":"/ Returns a vector perpendicular to the current one.","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":10338,"byte_end":10392,"line_start":288,"line_end":288,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":10397,"byte_end":10400,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":10405,"byte_end":10418,"line_start":290,"line_end":290,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":10423,"byte_end":10430,"line_start":291,"line_end":291,"column_start":5,"column_end":12}},{"value":"/ use vector2d::Vector2D;","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":10435,"byte_end":10462,"line_start":292,"line_end":292,"column_start":5,"column_end":32}},{"value":"/ let v = Vector2D::new(21.3, -98.1);","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":10467,"byte_end":10506,"line_start":293,"line_end":293,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(Vector2D::new(98.1, 21.3), v.normal());","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":10511,"byte_end":10565,"line_start":294,"line_end":294,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":10570,"byte_end":10577,"line_start":295,"line_end":295,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":10880,"byte_end":10883,"line_start":310,"line_end":310,"column_start":12,"column_end":15},"name":"dot","qualname":"<Vector2D<T>>::dot","value":"pub fn dot(Self, Self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Get the scalar/dot product of the two `Vector2D`.\n","sig":null,"attributes":[{"value":"/ Get the scalar/dot product of the two `Vector2D`.","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":10815,"byte_end":10868,"line_start":309,"line_end":309,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":11193,"byte_end":11207,"line_start":317,"line_end":317,"column_start":12,"column_end":26},"name":"length_squared","qualname":"<Vector2D<T>>::length_squared","value":"pub fn length_squared(Self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Get the squared length of a `Vector2D`. This is more performant than using\n `length()` -- which is only available for `Vector2D<f32>` and `Vector2D<f64>`\n -- as it does not perform any square root operation.\n","sig":null,"attributes":[{"value":"/ Get the squared length of a `Vector2D`. This is more performant than using","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":10956,"byte_end":11034,"line_start":314,"line_end":314,"column_start":5,"column_end":83}},{"value":"/ `length()` -- which is only available for `Vector2D<f32>` and `Vector2D<f64>`","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":11039,"byte_end":11120,"line_start":315,"line_end":315,"column_start":5,"column_end":86}},{"value":"/ -- as it does not perform any square root operation.","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":11125,"byte_end":11181,"line_start":316,"line_end":316,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":11445,"byte_end":11449,"line_start":327,"line_end":327,"column_start":12,"column_end":16},"name":"lerp","qualname":"<Vector2D<T>>::lerp","value":"pub fn lerp(Self, Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Linearly interpolates between two vectors\n","sig":null,"attributes":[{"value":"/ Linearly interpolates between two vectors","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":11388,"byte_end":11433,"line_start":326,"line_end":326,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":87},"span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":12386,"byte_end":12392,"line_start":374,"line_end":374,"column_start":12,"column_end":18},"name":"length","qualname":"<Vector2D<f32>>::length","value":"pub fn length(Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Get the length of the vector. If possible, favour `length_squared()` over\n this function, as it is more performant.\n","sig":null,"attributes":[{"value":"/ Get the length of the vector. If possible, favour `length_squared()` over","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":12248,"byte_end":12325,"line_start":372,"line_end":372,"column_start":5,"column_end":82}},{"value":"/ this function, as it is more performant.","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":12330,"byte_end":12374,"line_start":373,"line_end":373,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":12650,"byte_end":12659,"line_start":381,"line_end":381,"column_start":12,"column_end":21},"name":"normalise","qualname":"<Vector2D<f32>>::normalise","value":"pub fn normalise(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Get a new vector with the same direction as this vector, but with a length\n of 1.0. If the the length of the vector is 0, then the original vector is\n returned.\n","sig":null,"attributes":[{"value":"/ Get a new vector with the same direction as this vector, but with a length","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":12460,"byte_end":12538,"line_start":378,"line_end":378,"column_start":5,"column_end":83}},{"value":"/ of 1.0. If the the length of the vector is 0, then the original vector is","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":12543,"byte_end":12620,"line_start":379,"line_end":379,"column_start":5,"column_end":82}},{"value":"/ returned.","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":12625,"byte_end":12638,"line_start":380,"line_end":380,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":12865,"byte_end":12870,"line_start":391,"line_end":391,"column_start":12,"column_end":17},"name":"angle","qualname":"<Vector2D<f32>>::angle","value":"pub fn angle(Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Get the vector's direction in radians.\n","sig":null,"attributes":[{"value":"/ Get the vector's direction in radians.","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":12811,"byte_end":12853,"line_start":390,"line_end":390,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":91},"span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":13287,"byte_end":13293,"line_start":406,"line_end":406,"column_start":12,"column_end":18},"name":"length","qualname":"<Vector2D<f64>>::length","value":"pub fn length(Self) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Get the length of the vector. If possible, favour `length_squared()` over\n this function, as it is more performant.\n","sig":null,"attributes":[{"value":"/ Get the length of the vector. If possible, favour `length_squared()` over","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":13149,"byte_end":13226,"line_start":404,"line_end":404,"column_start":5,"column_end":82}},{"value":"/ this function, as it is more performant.","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":13231,"byte_end":13275,"line_start":405,"line_end":405,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":13551,"byte_end":13560,"line_start":413,"line_end":413,"column_start":12,"column_end":21},"name":"normalise","qualname":"<Vector2D<f64>>::normalise","value":"pub fn normalise(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Get a new vector with the same direction as this vector, but with a length\n of 1.0. If the the length of the vector is 0, then the original vector is\n returned.\n","sig":null,"attributes":[{"value":"/ Get a new vector with the same direction as this vector, but with a length","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":13361,"byte_end":13439,"line_start":410,"line_end":410,"column_start":5,"column_end":83}},{"value":"/ of 1.0. If the the length of the vector is 0, then the original vector is","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":13444,"byte_end":13521,"line_start":411,"line_end":411,"column_start":5,"column_end":82}},{"value":"/ returned.","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":13526,"byte_end":13539,"line_start":412,"line_end":412,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":93},"span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":13766,"byte_end":13771,"line_start":423,"line_end":423,"column_start":12,"column_end":17},"name":"angle","qualname":"<Vector2D<f64>>::angle","value":"pub fn angle(Self) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Get the vector's direction in radians.\n","sig":null,"attributes":[{"value":"/ Get the vector's direction in radians.","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":13712,"byte_end":13754,"line_start":422,"line_end":422,"column_start":5,"column_end":47}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":6665,"byte_end":6673,"line_start":154,"line_end":154,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":43}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":8006,"byte_end":8014,"line_start":196,"line_end":196,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":47},{"krate":0,"index":48}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":8784,"byte_end":8792,"line_start":227,"line_end":227,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":51}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":9413,"byte_end":9421,"line_start":249,"line_end":249,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":54}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":10052,"byte_end":10060,"line_start":271,"line_end":271,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":58},{"krate":0,"index":59}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":10275,"byte_end":10283,"line_start":284,"line_end":284,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":62}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":10707,"byte_end":10715,"line_start":304,"line_end":304,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":67},{"krate":0,"index":68}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":11280,"byte_end":11288,"line_start":322,"line_end":322,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":71}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":11607,"byte_end":11615,"line_start":334,"line_end":334,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":75}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":11764,"byte_end":11772,"line_start":343,"line_end":343,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":79}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":11987,"byte_end":11995,"line_start":356,"line_end":356,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":84}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":12228,"byte_end":12236,"line_start":371,"line_end":371,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":13129,"byte_end":13137,"line_start":403,"line_end":403,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":187}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":14054,"byte_end":14062,"line_start":436,"line_end":436,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":188},{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":193}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":14271,"byte_end":14279,"line_start":445,"line_end":445,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":200}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":14512,"byte_end":14520,"line_start":455,"line_end":455,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":207}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":14759,"byte_end":14767,"line_start":465,"line_end":465,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":212},{"krate":0,"index":213}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":14931,"byte_end":14939,"line_start":474,"line_end":474,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":220}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":15127,"byte_end":15135,"line_start":484,"line_end":484,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":227}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":15374,"byte_end":15382,"line_start":496,"line_end":496,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":103},{"krate":0,"index":104}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":15936,"byte_end":15944,"line_start":522,"line_end":522,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":112}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":16154,"byte_end":16162,"line_start":532,"line_end":532,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":116},{"krate":0,"index":117}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":16716,"byte_end":16724,"line_start":558,"line_end":558,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":125}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":16924,"byte_end":16932,"line_start":568,"line_end":568,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":129},{"krate":0,"index":130}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":17440,"byte_end":17448,"line_start":594,"line_end":594,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":138}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":17634,"byte_end":17642,"line_start":604,"line_end":604,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":142},{"krate":0,"index":143}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":18154,"byte_end":18162,"line_start":630,"line_end":630,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":151}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":6665,"byte_end":6673,"line_start":154,"line_end":154,"column_start":23,"column_end":31},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":152},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":8006,"byte_end":8014,"line_start":196,"line_end":196,"column_start":18,"column_end":26},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":152},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":8784,"byte_end":8792,"line_start":227,"line_end":227,"column_start":9,"column_end":17},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":152},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":9413,"byte_end":9421,"line_start":249,"line_end":249,"column_start":9,"column_end":17},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":152},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":10052,"byte_end":10060,"line_start":271,"line_end":271,"column_start":20,"column_end":28},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":152},"to":{"krate":2,"index":3152}},{"span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":10275,"byte_end":10283,"line_start":284,"line_end":284,"column_start":9,"column_end":17},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":152},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":10707,"byte_end":10715,"line_start":304,"line_end":304,"column_start":15,"column_end":23},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":152},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":11280,"byte_end":11288,"line_start":322,"line_end":322,"column_start":9,"column_end":17},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":152},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":11607,"byte_end":11615,"line_start":334,"line_end":334,"column_start":29,"column_end":37},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":152},"to":{"krate":2,"index":2960}},{"span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":11764,"byte_end":11772,"line_start":343,"line_end":343,"column_start":29,"column_end":37},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":152},"to":{"krate":2,"index":2963}},{"span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":11987,"byte_end":11995,"line_start":356,"line_end":356,"column_start":29,"column_end":37},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":152},"to":{"krate":2,"index":2963}},{"span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":12228,"byte_end":12236,"line_start":371,"line_end":371,"column_start":6,"column_end":14},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":152},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":13129,"byte_end":13137,"line_start":403,"line_end":403,"column_start":6,"column_end":14},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":152},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":14054,"byte_end":14062,"line_start":436,"line_end":436,"column_start":6,"column_end":14},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":152},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":14271,"byte_end":14279,"line_start":445,"line_end":445,"column_start":6,"column_end":14},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":152},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":14512,"byte_end":14520,"line_start":455,"line_end":455,"column_start":6,"column_end":14},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":152},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":14759,"byte_end":14767,"line_start":465,"line_end":465,"column_start":6,"column_end":14},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":152},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":14931,"byte_end":14939,"line_start":474,"line_end":474,"column_start":6,"column_end":14},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":152},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":15127,"byte_end":15135,"line_start":484,"line_end":484,"column_start":6,"column_end":14},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":152},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":15374,"byte_end":15382,"line_start":496,"line_end":496,"column_start":33,"column_end":41},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":152},"to":{"krate":2,"index":3125}},{"span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":15936,"byte_end":15944,"line_start":522,"line_end":522,"column_start":36,"column_end":44},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":152},"to":{"krate":2,"index":3156}},{"span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":16154,"byte_end":16162,"line_start":532,"line_end":532,"column_start":33,"column_end":41},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":152},"to":{"krate":2,"index":3130}},{"span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":16716,"byte_end":16724,"line_start":558,"line_end":558,"column_start":36,"column_end":44},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":152},"to":{"krate":2,"index":3160}},{"span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":16924,"byte_end":16932,"line_start":568,"line_end":568,"column_start":23,"column_end":31},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":152},"to":{"krate":2,"index":3135}},{"span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":17440,"byte_end":17448,"line_start":594,"line_end":594,"column_start":26,"column_end":34},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":152},"to":{"krate":2,"index":3164}},{"span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":17634,"byte_end":17642,"line_start":604,"line_end":604,"column_start":23,"column_end":31},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":152},"to":{"krate":2,"index":3140}},{"span":{"file_name":"C:\\Users\\adamp\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\vector2d-2.2.0\\src\\lib.rs","byte_start":18154,"byte_end":18162,"line_start":630,"line_end":630,"column_start":26,"column_end":34},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":152},"to":{"krate":2,"index":3168}}]}